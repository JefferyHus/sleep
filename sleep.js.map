{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;AAEA,eAAe,KAAf,CAAsB,QAAtB,EAAgC;AAC5B;AACA,QAAI,OAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAX;;AAEA,QAAK,KAAK,MAAL,IAAe,OAAO,KAAM,KAAK,MAAL,GAAc,CAApB,CAAP,KAAmC,UAAvD,EACA;AACI,oBAAY,KAAK,GAAL,EAAZ;AACH;;AAED;AACA,WAAO,KAAK,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiB,GAAjB,CAAsB,aAAK;AAAE,eAAO,CAAP;AAAW,KAAxC,CAAP;;AAEA,QAAK,KAAK,MAAL,IAAe,OAAO,KAAM,KAAK,MAAL,GAAc,CAApB,CAAP,KAAmC,QAAvD,EACA;AACI,YAAI,gBAAgB,KAAK,GAAL,EAApB;;AAEA;AACA,YAAI,cAAc,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,KAAtC,CAA4C,CAA5C,CAAlB;;AAEA;AACA,YAAI,KAAK,OAAQ,aAAR,CAAT;;AAEA,YAAK,OAAO,EAAP,KAAc,UAAnB,EACI,MAAM,IAAI,KAAJ,CAAU,mBAAmB,aAAnB,GAAmC,iBAA7C,CAAN;;AAEJ;AACA,eAAO,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV;AAAA,mBAAqB,OAAO,UAAP,CAAmB,YAAM;AAC9D,wBAAS,GAAG,KAAH,CAAS,IAAT,EAAe,WAAf,CAAT;AACH,aAFwC,EAEtC,QAFsC,CAArB;AAAA,SAAb,CAAP;AAGH;;AAED,WAAO,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV;AAAA,eAAqB,OAAO,UAAP,CAAkB,YAAM;AAC7D;AACH,SAFwC,EAEtC,QAFsC,CAArB;AAAA,KAAb,CAAP;AAGH","file":"sleep.js","sourcesContent":["\"use strict\";\r\n\r\nasync function sleep (duration) {\r\n    // check if any call back has been sent\r\n    var args = Array.prototype.slice.call(arguments, 1);\r\n    \r\n    if ( args.length && typeof args[ args.length - 1 ] === \"function\" )\r\n    {\r\n        _callback = args.pop();\r\n    }\r\n\r\n    // if not then check if it is a string\r\n    args = args.slice(0, 1).map( i => { return i; } );\r\n    \r\n    if ( args.length && typeof args[ args.length - 1 ] === \"string\" )\r\n    {\r\n        var _functionName = args.pop();\r\n\r\n        // create the arguments\r\n        var argsToArray = Array.prototype.slice.call(arguments).slice(2);\r\n        \r\n        // set the function body\r\n        var fn = window[ _functionName ];\r\n\r\n        if ( typeof fn !== \"function\" )\r\n            throw new Error(\"The function: \" + _functionName + \" does not exist\");\r\n\r\n        // call the function and send arguments\r\n        return new Promise( (resolve, reject) => window.setTimeout( () => {\r\n            resolve( fn.apply(null, argsToArray) );\r\n        }, duration ) );\r\n    }\r\n\r\n    return new Promise( (resolve, reject) => window.setTimeout(() => {\r\n        resolve();\r\n    }, duration) );\r\n}"]}